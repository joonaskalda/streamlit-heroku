{"version":3,"sources":["audio/3321821.wav","MyComponent.tsx","index.tsx"],"names":["module","exports","Osoon","require","MyComponent","state","numClicks","isFocused","isPlaying","audio","Audio","render","props","args","theme","style","borderStyling","primaryColor","border","outline","onClick","togglePlay","onClicked","setState","prevState","_onFocus","_onBlur","componentDidMount","addEventListener","play","pause","Streamlit","setComponentValue","this","removeEventListener","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"oKAAAA,EAAOC,QAAU,IAA0B,qC,gHCMrCC,EAAQC,EAAQ,IAYhBC,E,4MACGC,MAAQ,CAAEC,UAAW,EAAGC,WAAW,EAAQC,WAAW,G,EACtDC,MAAQ,IAAIC,MAAMR,G,EAElBS,OAAS,WAGD,EAAKC,MAAMC,KAAX,KAAb,IAKQC,EAAU,EAAKF,MAAfE,MACFC,EAA6B,GAInC,GAAID,EAAO,CAGT,IAAME,EAAa,oBACjB,EAAKX,MAAME,UAAYO,EAAMG,aAAe,QAE9CF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAOlB,OACE,+BACI,EAAKX,MAAMG,WAAa,4BAAQY,QAAS,EAAKC,YAAa,EAAKhB,MAAMG,UAAY,QAAU,U,EAO5Fc,UAAY,WAGlB,EAAKC,UACH,SAAAC,GAAS,MAAK,CAAElB,WAAYkB,EAAUlB,UAAY,GAAG,O,EAKjDmB,SAAW,WACjB,EAAKF,SAAS,CAAEhB,WAAW,K,EAIrBmB,QAAU,WAChB,EAAKH,SAAS,CAAEhB,WAAW,K,EAI7BoB,kBAAoB,WAClB,EAAKlB,MAAMmB,iBAAiB,SAAS,kBAAM,EAAKL,SAAS,CAAEf,WAAW,Q,EAOxEa,WAAa,WACX,EAAKE,SAAS,CAAEf,WAAY,EAAKH,MAAMG,YAAa,WAClD,EAAKH,MAAMG,UAAY,EAAKC,MAAMoB,OAAS,EAAKpB,MAAMqB,QACtDC,IAAUC,kBAAkB,EAAK3B,MAAMG,e,0DAP3C,WAAwB,IAAD,OACrByB,KAAKxB,MAAMyB,oBAAoB,SAAS,kBAAM,EAAKX,SAAS,CAAEf,WAAW,W,GAhEnD2B,KAoFXC,cAAwBhC,GClGvCiC,IAAS1B,OACP,kBAAC,IAAM2B,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.c9406285.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/3321821.cdc1a338.wav\";","import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nconst Osoon = require(\"./audio/3321821.wav\")\ninterface State {\n  numClicks: number\n  isFocused: boolean\n  isPlaying: boolean\n}\n\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false , isPlaying: false }\n  public audio = new Audio(Osoon)\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <span>\n        {!this.state.isPlaying && <button onClick={this.togglePlay}>{this.state.isPlaying ? 'Pause' : 'Play'}</button>}\n      </span>\n      \n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: (prevState.numClicks + 1)%2 })\n    )\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n  \n\n  componentDidMount = (): void => {\n    this.audio.addEventListener('ended', () => this.setState({ isPlaying: false }));  \n  }\n  \n  componentWillUnmount() {\n    this.audio.removeEventListener('ended', () => this.setState({ isPlaying: false }));  \n  }\n\n  togglePlay = () => {\n    this.setState({ isPlaying: !this.state.isPlaying }, () => {\n      this.state.isPlaying ? this.audio.play() : this.audio.pause();\n      Streamlit.setComponentValue(this.state.isPlaying);\n    });\n  }\n}\n\n\n\n//export default Music;\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}