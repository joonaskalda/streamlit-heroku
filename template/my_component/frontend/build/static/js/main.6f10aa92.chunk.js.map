{"version":3,"sources":["audio/3321821.wav","MyComponent.tsx","index.tsx"],"names":["module","exports","Osoon","require","MyComponent","state","numClicks","isFocused","audio","Audio","render","props","args","theme","style","borderStyling","primaryColor","border","outline","onClick","onClicked","disabled","onFocus","_onFocus","onBlur","_onBlur","setState","prevState","Streamlit","setComponentValue","play","pause","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"oKAAAA,EAAOC,QAAU,IAA0B,qC,yGCMnCC,EAAQC,EAAQ,IAUhBC,E,4MACGC,MAAQ,CAAEC,UAAW,EAAGC,WAAW,G,EACnCC,MAAQ,IAAIC,MAAMP,G,EAElBQ,OAAS,WAGD,EAAKC,MAAMC,KAAX,KAAb,IAKQC,EAAU,EAAKF,MAAfE,MACFC,EAA6B,GAInC,GAAID,EAAO,CAGT,IAAME,EAAa,oBACjB,EAAKV,MAAME,UAAYM,EAAMG,aAAe,QAE9CF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAOlB,OACE,+BACI,EAAKV,MAAMC,WAAa,6BAC1B,4BACEQ,MAAOA,EACPK,QAAS,EAAKC,UACdC,SAAU,EAAKV,MAAMU,SACrBC,QAAS,EAAKC,SACdC,OAAQ,EAAKC,SALf,W,EAcEL,UAAY,WAGlB,EAAKM,UACH,SAAAC,GAAS,MAAK,CAAErB,UAAWqB,EAAUrB,UAAY,MACjD,WAAOsB,IAAUC,kBAAkB,EAAKxB,MAAMC,WAC5C,EAAKD,MAAMC,UAAY,EAAKE,MAAMsB,OAAS,EAAKtB,MAAMuB,Y,EAKpDR,SAAW,WACjB,EAAKG,SAAS,CAAEnB,WAAW,K,EAIrBkB,QAAU,WAChB,EAAKC,SAAS,CAAEnB,WAAW,K,YAjELyB,KA0EXC,cAAwB7B,GCtFzC8B,IAASxB,OACP,kBAAC,IAAMyB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.6f10aa92.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/3321821.cdc1a338.wav\";","import {\n    Streamlit,\n    StreamlitComponentBase,\n    withStreamlitConnection,\n  } from \"streamlit-component-lib\"\n  import React, { ReactNode } from \"react\"\n  const Osoon = require(\"./audio/3321821.wav\")\n  interface State {\n    numClicks: number\n    isFocused: boolean\n  }\n  \n  /**\n   * This is a React-based component template. The `render()` function is called\n   * automatically when your component should be re-rendered.\n   */\n  class MyComponent extends StreamlitComponentBase<State> {\n    public state = { numClicks: 0, isFocused: false }\n    public audio = new Audio(Osoon)\n  \n    public render = (): ReactNode => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      const name = this.props.args[\"name\"]\n  \n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const { theme } = this.props\n      const style: React.CSSProperties = {}\n  \n      // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${\n          this.state.isFocused ? theme.primaryColor : \"gray\"\n        }`\n        style.border = borderStyling\n        style.outline = borderStyling\n      }\n  \n      // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n      return (\n        <span>\n          {!this.state.numClicks && <div>\n          <button\n            style={style}\n            onClick={this.onClicked}\n            disabled={this.props.disabled}\n            onFocus={this._onFocus}\n            onBlur={this._onBlur}\n          >\n          Play\n          </button></div>}\n        </span>\n      )\n    }\n  \n    /** Click handler for our \"Click Me!\" button. */\n    private onClicked = (): void => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      this.setState(\n        prevState => ({ numClicks: prevState.numClicks + 1 }),\n        () => {Streamlit.setComponentValue(this.state.numClicks);\n          this.state.numClicks ? this.audio.play() : this.audio.pause()}\n      )\n    }\n  \n    /** Focus handler for our \"Click Me!\" button. */\n    private _onFocus = (): void => {\n      this.setState({ isFocused: true })\n    }\n  \n    /** Blur handler for our \"Click Me!\" button. */\n    private _onBlur = (): void => {\n      this.setState({ isFocused: false })\n    }\n  }\n  \n  // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n  // connection between your component and the Streamlit app, and handles\n  // passing arguments from Python -> Component.\n  //\n  // You don't need to edit withStreamlitConnection (but you're welcome to!).\n  export default withStreamlitConnection(MyComponent)\n  ","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}